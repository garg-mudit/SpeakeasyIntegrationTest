# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

parameters:
- name: generateCSharp
  displayName: 'Generate C# SDK'
  type: boolean
  default: false
- name: generateJava
  displayName: 'Generate Java SDK'
  type: boolean
  default: false
- name: generatePython
  displayName: 'Generate Python SDK'
  type: boolean
  default: false
- name: generateTypeScript
  displayName: 'Generate TypeScript SDK'
  type: boolean
  default: false
- name: generatePHP
  displayName: 'Generate PHP SDK'
  type: boolean
  default: false
- name: generateRuby
  displayName: 'Generate Ruby SDK'
  type: boolean
  default: false


pool:
  vmImage: ubuntu-latest

stages:
#- stage: 'Validate_Spec_Stage'
#  jobs:
#  - job: Validate_OpenAPI_Spec
#    steps:
#    - script: cat openapi.json
#      displayName: 'Display openapi.json Content'    
#    - script: |
#        # Assuming the OpenAPI spec is named 'openapi.yaml' and located at the root
#        curl -X POST -H 'Content-Type: application/json' --data-binary @openapi.json https://validator.swagger.io/validator/debug
#        #TODO@MUDIT: CALL INTERNAL SERVICE INSTEAD AND ADD LOGIC TO SHOW ERRORS AND FAIL PIPELINE BASED ON RESULT. 
#      displayName: 'Validate OpenAPI Specification'
#- stage: InstallCLI
#  jobs:
#  - job: Install_Speakeasy_CLI
#    steps:
#    - script: |
#        curl -fsSL https://go.speakeasy.com/cli-install.sh | sh
#      displayName: 'Install Speakeasy CLI'

- stage: GenerateSDKs
  dependsOn: InstallCLI
  jobs:
  - template: generate-sdk-template.yml
    parameters:
      language: 'csharp'
      generateSDK: ${{ parameters.generateCSharp }}
  - template: generate-sdk-template.yml
    parameters:
      language: 'java'
      generateSDK: ${{ parameters.generateJava }}
  - template: generate-sdk-template.yml
    parameters:
      language: 'php'
      generateSDK: ${{ parameters.generatePHP }}
  - template: generate-sdk-template.yml
    parameters:
      language: 'ruby'
      generateSDK: ${{ parameters.generateRuby }}
  - template: generate-sdk-template.yml
    parameters:
      language: 'python'
      generateSDK: ${{ parameters.generatePython }}
  - template: generate-sdk-template.yml
    parameters:
      language: 'typescript'
      generateSDK: ${{ parameters.generateTypeScript }}
