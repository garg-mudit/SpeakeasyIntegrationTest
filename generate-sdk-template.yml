# File: generate-sdk-template.yml
parameters:
- name: language
  type: string
- name: generateSDK
  type: boolean
  default: false

jobs:
- job: Generate_${{ parameters.language }}
  condition: eq('${{ parameters.generateSDK }}', 'true')
  steps:

  - template: install-speakeasy-cli.yml

  - template: clone-repo.yml
    # This assumes for now that the private repo is already created.
    # TODO: Create a new repo if it doesn't exist based on the language and this should go though an approval process.
    parameters:
      # TODO: Replace with the actual private orgName and repoName.
      orgName: "MGDS01"
      # TODO: Replace targetDirectory with the actual private repoName.
      repoName: "docusign-test-js-sdk"
      # repoName: "docuTest-${{parameters.language}}-sdk-private"
      targetDirectory: "private-sdks/docuTest-${{parameters.language}}-sdk-private"
  - script: |
      # TODO: Replace targetDirectory with the actual private repoName.
      cd "private-sdks/docuTest-${{parameters.language}}-sdk-private"
      speakeasy run
    displayName: 'Generate ${{ parameters.language }} SDK'

  - script: |
      cd "private-sdks/docuTest-${{parameters.language}}-sdk-private"

      git config user.name "automation-bot"
      # TODO: Replace with correct email.
      git config user.email "mudit.garg@docusign.com"

      git checkout -b sdk-update-${{ parameters.language }}-$(Build.BuildId)

      git add .
      git commit -m "chore: regenerate ${{ parameters.language }} SDK via Speakeasy"
      git push origin HEAD
    displayName: 'Commit and Push SDK Changes'

  - script: |
      cd "private-sdks/docuTest-${{parameters.language}}-sdk-private"
      echo "$(GITHUB_PAT)" | gh auth login --with-token
      gh --version

      pr_info=$(gh pr create \
      --title "Update ${{ parameters.language }} SDK" \
      --body "Automated PR with regenerated SDK" \
      --base main \
      --head sdk-update-${{ parameters.language }}-$(Build.BuildId))

      # pr_number=$(echo "$pr_info" | jq -r '.number')
      # pr_url=$(echo "$pr_info" | jq -r '.url')

      pr_url=$(echo "$pr_info" | grep -o 'https://github.com[^ ]*')
      pr_number=$(echo "$pr_url" | grep -o '[0-9]*$')

      echo "Created PR #$pr_number"
      echo "URL: $pr_url"
      # # ✅ Set as regular variables (for use within same job)
      # echo "##vso[task.setvariable variable=privateRepoPrNumber]$pr_number"
      # echo "##vso[task.setvariable variable=privateRepoPrUrl]$pr_url"

      # # ✅ Set as output variables (for use across jobs)
      # echo "##vso[task.setvariable variable=privateRepoPrNumber;isOutput=true]$pr_number"
      # echo "##vso[task.setvariable variable=privateRepoPrUrl;isOutput=true]$pr_url"

      # pr_number=$privateRepoPrNumber
      repo="MGDS01/docusign-test-js-sdk"  # TODO: Replace with your actual repository

      echo "Monitoring PR #$pr_number for merge status..."

      # Set the timeout duration (in seconds) and the interval between checks
      timeout_seconds=300  # 5 minutes
      interval=30  # 30 seconds

      # Capture the start time
      start_time=$SECONDS

      while true; do

        # Calculate elapsed time
        elapsed=$((SECONDS - start_time))

        # Check if timeout has been reached
        if [ "$elapsed" -ge "$timeout_seconds" ]; then
          echo "⏰ Timeout reached after $elapsed seconds. PR #$pr_number was not merged within the expected time."
          exit 1
        fi

        # Retrieve PR status in JSON format
        pr_status=$(gh pr view "$pr_number" --repo "$repo" --json state,mergedAt --jq '.state + " " + (.mergedAt // "")')
        echo "PR Status: $pr_status"

        # Parse the status and mergedAt fields
        read state merged_at <<< "$pr_status"
        echo "State: $state"
        echo "Merged At: $merged_at"

        if [[ "$state" == "MERGED" || -n "$merged_at" ]]; then
          echo "✅ PR #$pr_number has been merged!"
          exit 0
        elif [[ "$state" == "CLOSED" ]]; then
          echo "❌ PR #$pr_number was closed without merging."
          exit 1
        else
          echo "⏳ PR #$pr_number is still open."
          # Continue monitoring or handle accordingly
        fi
      done
    displayName: 'Create Pull Request on GitHub'

    # displayName: 'Wait for PR to be merged and then do something'
# - publish: ./sdks/${{ parameters.language }}